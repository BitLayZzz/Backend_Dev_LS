This section of the course discusses the differences between
"pass by reference" and "pass by value"

Started 12/18/2021

- This programming topic stems from there being two ways of dealing objects passed to methods
- You either have "references" to the og object, or "values" (copies) of the og object.

So what is pass by "value"?
- In C, for example, passing an object by value creates a copy of the og object.
- Copies have no effect on the original object outside of the method.
- Ruby is up for debate
  --> some say it's pass by value, because re-assigning the object doesn't affect outerscope.
  --> methods require an implicit or explicit return to re-assign outerscope variables

-------------------------------------------
Continued 02/23/2021

Now what is pass by "reference"?
- Passing by reference allows method operations to make changes to original objects.
- Ruby can also be "pass by reference", because methods mutate original objects.
  --> ex: the difference between 'str.capitalize' and 'str.capitalize!'

So What's Going On Here?!
- Some Rubyists call this behavior "passing by value of the reference", or "call by sharing"
- Most important thing: 
 --> When an operation within the method mutates the caller, it will affect the og object
- Whether or a not an object is mutated by method operations depends on the operation used...
  --> In other words, practice a lot and you will notice which ones do and which ones don't!
  --> ex: array = array + [name] is very different than array = array << [name]. Try it out!

So in Summary...

- Pass by Value uses object copies, Pass by Reference uses og objects, and Ruby uses both! 
- So Ruby is a "Pass by Value of the Reference" language!

-----------------------------------------
Continued 02/27/2021

Variables as Pointers
- Very confusing to new programmers, but is one THE most important.
- basic example:
  --> a = "hi there", b = a, a = "not here": What is 'b' in this case in ruby?
- basic idea is Variables are POINTERS to PHYSICAL MEMORY SPACE(address).
- In ruby, the '=' operator REASSIGNS variables to different addresses in memory.
- different memory spaces can hold the same value.
- another example:
  --> a = 'hi', b = a, a << ', sam': What is 'b' here in ruby?
- In the second example, there is no reassignment of a! and b will return the same value.
In ruby, this can be further examined by using the 'object_id' method

In  Summary for Pointers
- variables POINT to PHYSICAL SPACES IN MEMORY (addresses)
- Some operations mutate addresses in memory, and others change where variables point to
- If a method MUTATES the caller, it changes the value in that physical space in memory.
- If the value in memory changes, all variables POINTING to it will change!
