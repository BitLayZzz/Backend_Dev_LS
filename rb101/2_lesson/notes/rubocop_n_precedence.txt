Second half of lesson 2 to notes starting from section 10: Rubocop

--------------- 
RUBOCOP GEM

- Static code analyzer. Analyzes your code and offers advice about its style format as well as possible logical errors. Rubocop itself is a modular framework using a pluggable architecture to insert enforcement rules. In Rubocop parlance, these rules are called 'cops.' Cops are further grouped into departments.


- Code Linting:
  - A program that inspects your code for possible logical errors or code smells. This isn't foolproof, but can serve as a first level of defense against obvious problems. Rubocop has some basic code linting functionality built-in.


------------------
PRECEDENCE

- The meaning of an expression in Ruby is determined by what is called operator precedence. It's a set of rules that dictate how Ruby determines what operands each operator takes.

- Precendence determines the meaning of an expression.

- For example:
    : 3 + 5 * 7 --> '*' takes precendence over '+' 
    : (3 + 5) * 7 --> everything inside '(...)' now takes precendence

- The example above highlights an important point. If you're using 2 or more different operators in an expression, use parentheses to explicitly define the meaning. Even relying on left-to-right evaluation is subject to problems - for instance, multiple '=' operators evaluate right-to-left

- AGAIN! DON'T RELY ON PRECEDENCE RULES WHEN MIXING OPERATORS. 

Code Evaluation:
  - Precendence in Ruby is only part of the story; the other parts to consider have to do with code evaluation; left-to-right eval, right-to-left eval, short-circuiting, and ternary expressions.
  - In an arithmetic expression, Ruby first goes through an expression left-to-right and evaluates everything it can without calling any operators.
  - Right-to-left evaluation occurs when you do multiple assignments or multiple modifiers:
    ex: a = b = c = 3
    - this is not good practice in Ruby, so don't do it.
  - The more conditional operators, such as '?:', &&, and ||, are treated differently from other operators and do not evaluate subexpressions unless it needs them.

Block Precedence:
  - Blocks have the lowest precedence in ruby. However between the two different formats ( {...} and do...end ) {...} takes slightly higher precence. To test this call p on an array#select block in both formats
    - the array with do...end should only return the Enumerator object without changes from the block.
  - Another way to think about it, the binding of a method and it's argument is slightly tighter than the binding of a method and a do...end block. While a {...} block has a tighter binding to it's method
    - This is useful to know if you ever need to write one liners that immediately output to the screen.
