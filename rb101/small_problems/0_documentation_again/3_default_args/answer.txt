Description:
Consider the following method and a call to that method:

def my_method(a, b = 2, c = 3, d)
  p [a, b, c, d]
end

my_method(4, 5, 6)

Use the ruby documentation to determine what this code will print.

According to the Ruby 2.7.2 documentation at https://ruby-doc.org/core-2.7.2/doc/syntax/calling_methods_rdoc.html, when the method defines default arguments you do not need to supply all the arguments to the method. Ruby will fill the missing arguments. It also says Ruby fills in missing arguments from left to right. 

However when default arguments appear in the middle, the arguments provided by the method call will first fill the arguments at the beginning and end that are not optionally assigned. After this initial step, any remaining arguments in the middle will be assigned from left to right.

Thus, the code will output

[4, 5, 3, 6]


---- LS Solution notes ----
 - We are using "default positional arguments".
 - This exercise is mostly concerned with where to find this information should you run into a case where it is difficult to determine how the arguments to a method are interpreted.
 - Try not to do this in your own code; it's hard to understand.
